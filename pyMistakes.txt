'''
###Avoid Python Mistakes :

1. Syntax Errors:
   - Missing colons after control flow statements.
   - Incorrect indentation.
   - Unclosed parentheses, brackets, or braces.
   - Missing or unmatched quotation marks in strings.
   - Mismatched opening and closing brackets.

2. Case Sensitivity:
   - Using different case for variable names.

3. Spacing Errors:
   - Trailing whitespace at the end of lines.
   - Inconsistent or missing spaces around operators.
   - Missing spaces after commas in function calls.
   - Inconsistent line endings.
   - Inconsistent use of single and double quotes for strings.
   - Inconsistent indentation levels or incorrect alignment.

4. Variable Naming:
   - Using reserved keywords as variable names.
   - Using single-character variable names.
   - Not following Python naming conventions (PEP 8) for variables and functions.

5. Forgetting to Initialize Variables:
   - Using a variable without initializing it.

6. *Mixing Data Types:
   - Performing operations on incompatible data types.

7. Using `==` for Assignment:
   - Using `==` for assignment instead of `=`.

8. Using `^` for Logical XOR:
   - Using `^` for logical XOR (exclusive OR) instead of using !=.

9. Unintended Global Variables:
   - Modifying a global variable unintentionally within a function.

10. Misusing `try..except` Blocks:
    - Using overly broad `except` statements that catch more exceptions than intended.

11. Incorrect String Concatenation:
    - Attempting to concatenate strings and non-strings without converting non-strings to strings.

12. Not Handling Missing Keys in Dictionaries:
    - Accessing a dictionary key that doesn't exist without handling the KeyError.

13. Using a Reserved Name as a Variable:
    - Using a Python built-in function or a module name as a variable.

14. Misusing the `range` Function:
    - Misusing the `range` function or not converting it to a list when required.

15. Incorrect String Quoting:
    - Mixing single and double quotes inconsistently in a string.

16. Importing Modules:
    - Not importing required modules before using them.

17. Using `==` for Object Comparison:
    - Using `==` to compare two objects for identity (should use `is`).

18. Neglecting Proper Function Documentation:
    - Not documenting functions using docstrings or not providing clear descriptions of what the function does.

this quick reference guide to avoid common Python mistakes!
'''




#### 1. Syntax Errors:

Mistake 1: Missing colons after control flow statements.
    if x > 5  # Missing colon

Correction 1:
    if x > 5:  # Add a colon

Mistake 2: Incorrect indentation.
    if True:
    print("Incorrect indentation")

Correction 2:
    if True:
        print("Correct indentation")

Mistake 3: Unclosed parentheses, brackets, or braces.
    my_list = [1, 2, 3

Correction 3:
    my_list = [1, 2, 3]

Mistake 4: Missing or unmatched quotation marks in strings.
    message = 'It's a Python tutorial.'

Correction 4:
    message = "It's a Python tutorial."

Mistake 5: Mismatched opening and closing brackets.
    [1, 2, 3}

Correction 5:
    [1, 2, 3]

#### 2. Case Sensitivity:

Mistake: Using different case for variable names.
    myVariable = 10
    print(MyVariable)

Correction:
    myVariable = 10
    print(myVariable)

#### 3. Spacing Errors:

Mistake 1: Trailing whitespace at the end of lines.
    text = "Hello, World!     "

Correction 1:
    text = "Hello, World!"

Mistake 2: Inconsistent or missing spaces around operators.
    x=5 + y*2

Correction 2:
    x = 5 + y * 2

Mistake 3: Missing spaces after commas in function calls.
    my_function(arg1,arg2)

Correction 3:
    my_function(arg1, arg2)

Mistake 4: Inconsistent line endings.
    text = "Hello, World!\r\n"

Correction 4:
    text = "Hello, World!\n"

Mistake 5: Inconsistent use of single and double quotes for strings.
    message = 'It's a "Python" tutorial.'

Correction 5:
    message = "It's a 'Python' tutorial."

Mistake 6: Inconsistent indentation levels or incorrect alignment.
    if condition:
      print("Indented incorrectly")
       print("Incorrectly indented")

Correction 6:
    if condition:
        print("Indented correctly")
        print("Correct indentation")

#### 4. Variable Naming:

Mistake 1: Using reserved keywords as variable names.
    class = "Python"

Correction 1:
    class_name = "Python"

Mistake 2: Using single-character variable names.
    x = 10

Correction 2:
    count = 10

Mistake 3: Not following Python naming conventions (PEP 8) for variables and functions.
    MyVariable = 42

Correction 3:
    my_variable = 42

#### 5. Forgetting to Initialize Variables:

Mistake: Using a variable without initializing it.
    result = total + 5

Correction:
    total = 0  # Initialize 'total' before using it
    result = total + 5

#### 6. Mixing Data Types:

Mistake: Performing operations on incompatible data types.
    number = "10" + 5

Correction:
    number = int("10") + 5  # Convert the string to an integer

#### 7. Using `==` for Assignment:

Mistake: Using `==` for assignment instead of `=`.
    x == 5

Correction:
    x = 5

#### 8. Using `^` for Logical XOR:

Mistake: Using `^` for logical XOR (exclusive OR) instead of using !=.

Correction:
    if a != b

#### 9. Unintended Global Variables:

Mistake: Modifying a global variable unintentionally within a function.

Correction:
    total = 0

    def add_numbers(x, y):
        global total  # Declare 'total' as a global variable
        total = x + y
        return total

#### 10. Misusing `try..except` Blocks:

Mistake: Using overly broad `except` statements that catch more exceptions than intended.

Correction:
    try:
        # some code
    except SpecificException:
        # catching a specific exception

#### 11. Incorrect String Concatenation:

Mistake: Attempting to concatenate strings and non-strings without converting non-strings to strings.

Correction:
    result = "The answer is " + str(42)

#### 12. Not Handling Missing Keys in Dictionaries:

Mistake: Accessing a dictionary key that doesn't exist without handling the KeyError.

Correction:
    my_dict = {"name": "Alice", "age": 30}
    value = my_dict.get("city", "Unknown")

#### 13. Using a Reserved Name as a Variable:

Mistake: Using a Python built-in function or a module name as a variable.

Correction:
    total = 0

#### 14. Misusing the `range` Function:

Mistake: Misusing the `range` function or not converting it to a list when required.

Correction:
    numbers = list(range(5))

#### 15. Incorrect String Quoting:

Mistake: Mixing single and double quotes inconsistently in a string.

Correction:
    text = 'It\'s a "Python" tutorial.'

#### 16. Importing Modules:

Mistake: Not importing required modules before using them.

Correction:
    import random
    random_number = random.randint(1, 10)

#### 17. Using `==` for Object Comparison:

Mistake: Using `==` to compare two objects for identity (should use `is`).

Correction:
    if list1 is list2

#### 18. Neglecting Proper Function Documentation:

Mistake: Not documenting functions using docstrings or not providing clear descriptions of what the function does.

Correction:
    def add(x, y):
        """
        Adds two numbers and returns the result.
        """
        return x + y

#### 19. Misusing `^` for Logical XOR:

Mistake: Using `^` for logical XOR (exclusive OR) instead of using !=.

Correction:
    if a != b

#### 20. Misplacing the `return` Statement:

Mistake: Misplacing the `return` statement outside of a function.

Correction:
    def add_numbers(x, y):
        result = x + y
        return result

#### 21. Misusing `try..except` Blocks:

Mistake: Using overly broad `except` statements that catch more exceptions than intended.

Correction:
    try:
        # some code
    except SpecificException:
        # catching a specific exception

#### 22. Incorrect String Concatenation:

Mistake: Attempting to concatenate strings and non-strings without converting non-strings to strings.

Correction:
    result = "The answer is " + str(42)

#### 23. Not Handling Missing Keys in Dictionaries:

Mistake: Accessing a dictionary key that doesn't exist without handling the KeyError.

Correction:
    my_dict = {"name": "Alice", "age": 30}
    value = my_dict.get("city", "Unknown")

#### 24. Using a Reserved Name as a Variable:

Mistake: Using a Python built-in function or a module name as a variable.

Correction:
    total = 0

#### 25. Misusing the `range` Function:

Mistake: Misusing the `range` function or not converting it to a list when required.

Correction:
    numbers = list(range(5))

#### 26. Incorrect String Quoting:

Mistake: Mixing single and double quotes inconsistently in a string.

Correction:
    text = 'It\'s a "Python" tutorial.'

#### 27. Inconsistent Use of Quotation Marks for Strings:

Mistake: Using a mixture of single and double quotes inconsistently within a string.

Correction:
    message = "It's a 'Python' tutorial."

#### 28. Not Handling Missing Keys in Dictionaries:

Mistake: Accessing a dictionary key that doesn't exist without handling the KeyError.

Correction:
    my_dict = {"name": "Alice", "age": 30}
    value = my_dict.get("city", "Unknown"

#### 29. Misusing the `range` Function:

Mistake: Misusing the `range` function or not converting it to a list when required.

Correction:
    numbers = list(range(5))

#### 30. Incorrect String Concatenation:

Mistake:Attempting to concatenate strings and non-strings without converting non-strings to strings.

Correction:
    result = "The answer is " + str(42)

#### 31. Using `==` for Object Comparison:

Mistake: Using `==` to compare two objects for identity (should use `is`).

Correction:
    if list1 is list2

#### 32. Neglecting Proper Function Documentation:

Mistake: Not documenting functions using docstrings or not providing clear descriptions of what the function does.

Correction:
    def add(x, y):
        """
        Adds two numbers and returns the result.
        """
        return x + y

#### 33. Using `^` for Logical XOR:

Mistake: Using `^` for logical XOR (exclusive OR) instead of using !=.

Correction:
    if a != b

#### 34. Misusing `try..except` Blocks:

Mistake: Using overly broad `except` statements that catch more exceptions than intended.

Correction:
    try:
        # some code
    except SpecificException:
        # catching a specific exception

#### 35. Incorrect String Concatenation:

Mistake: Attempting to concatenate strings and non-strings without converting non-strings to strings.

Correction:
    result = "The answer is " + str(42)

#### 36. Not Handling Missing Keys in Dictionaries:

Mistake: Accessing a dictionary key that doesn't exist without handling the KeyError.

**Correction:**
    my_dict = {"name": "Alice", "age": 30}
    value = my_dict.get("city", "Unknown")

#### 37. Using a Reserved Name as a Variable:

Mistake: Using a Python built-in function or a module name as a variable.

Correction:
    total = 0

#### 38. Misusing the `range` Function:

Mistake: Misusing the `range` function or not converting it to a list when required.

Correction:
    numbers = list(range(5))

#### 39. Incorrect String Quoting:

Mistake: Mixing single and double quotes inconsistently in a string.

Correction:
    text = 'It\'s a "Python" tutorial.'

#### 40. Inconsistent Use of Quotation Marks for Strings:

Mistake: Using a mixture of single and double quotes inconsistently within a string.

Correction:
    message = "It's a 'Python' tutorial."

#### 41. Not Handling Missing Keys in Dictionaries:

Mistake* Accessing a dictionary key that doesn't exist without handling the KeyError.

Correction:
    my_dict = {"name": "Alice", "age": 30}
    value = my_dict.get("city", "Unknown")

#### 42. Misusing the `range` Function:

Mistake: Misusing the `range` function or not converting it to a list when required.

Correction:
    numbers = list(range(5))

#### 43. Incorrect String Concatenation:

Mistake: Attempting to concatenate strings and non-strings without converting non-strings to strings.

Correction:
    result = "The answer is " + str(42)

#### 44. Using `==` for Object Comparison:

Mistake: Using `==` to compare two objects for identity (should use `is`).

Correction:
    if list1 is list2

#### 45. Neglecting Proper Function Documentation:

Mistake: Not documenting functions using docstrings or not providing clear descriptions of what the function does.

Correction:
    def add(x, y):
        """
        Adds two numbers and returns the result.
        """
        return x + y
